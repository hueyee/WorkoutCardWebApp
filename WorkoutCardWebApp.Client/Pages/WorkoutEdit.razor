@page "/workouts/edit"
@inject IWorkoutStorageService StorageService
@inject NavigationManager Navigation

<PageTitle>@(IsEditMode ? "Edit Workout" : "Create Workout")</PageTitle>

<h1>@(IsEditMode ? "Edit Workout" : "Create Workout")</h1>

@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

@if (CurrentWorkout != null)
{
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Workout Details</h5>
                    
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input type="text" class="form-control" @bind="CurrentWorkout.Name" placeholder="Enter workout name" />
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" @bind="CurrentWorkout.Description" rows="3" placeholder="Enter workout description"></textarea>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Difficulty</label>
                                <select class="form-select" @bind="CurrentWorkout.Difficulty">
                                    <option value="">Select difficulty</option>
                                    <option value="Beginner">Beginner</option>
                                    <option value="Intermediate">Intermediate</option>
                                    <option value="Advanced">Advanced</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Tags (comma-separated)</label>
                                <input type="text" class="form-control" @bind="TagsInput" placeholder="e.g. strength, cardio, legs" />
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Notes</label>
                        <textarea class="form-control" @bind="CurrentWorkout.Notes" rows="2" placeholder="Additional notes"></textarea>
                    </div>
                </div>
            </div>
            
            <!-- Blocks Section -->
            <div class="card mt-3">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h5 class="card-title">Workout Blocks</h5>
                        <button class="btn btn-success btn-sm" @onclick="AddBlock">Add Block</button>
                    </div>
                    
                    @if (CurrentWorkout.Blocks.Any())
                    {
                        @for (int blockIndex = 0; blockIndex < CurrentWorkout.Blocks.Count; blockIndex++)
                        {
                            var block = CurrentWorkout.Blocks[blockIndex];
                            var currentBlockIndex = blockIndex;
                            
                            <div class="border rounded p-3 mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h6>Block @(blockIndex + 1)</h6>
                                    <button class="btn btn-danger btn-sm" @onclick="() => RemoveBlock(currentBlockIndex)">Remove</button>
                                </div>
                                
                                <div class="row">
                                    <div class="col-md-6">
                                        <input type="text" class="form-control mb-2" @bind="block.Name" placeholder="Block name" />
                                    </div>
                                    <div class="col-md-6">
                                        <input type="number" class="form-control mb-2" @bind="block.Sets" placeholder="Sets" />
                                    </div>
                                </div>
                                <textarea class="form-control mb-2" @bind="block.Description" rows="2" placeholder="Block description"></textarea>
                                
                                <!-- Exercises in this block -->
                                <div class="mt-3">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <strong>Exercises</strong>
                                        <button class="btn btn-outline-primary btn-sm" @onclick="() => AddExercise(currentBlockIndex)">Add Exercise</button>
                                    </div>
                                    
                                    @for (int exerciseIndex = 0; exerciseIndex < block.Exercises.Count; exerciseIndex++)
                                    {
                                        var exercise = block.Exercises[exerciseIndex];
                                        var currentExerciseIndex = exerciseIndex;
                                        
                                        <div class="border-start border-primary ps-3 mb-2">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <input type="text" class="form-control form-control-sm" @bind="exercise.Name" placeholder="Exercise name" />
                                                <button class="btn btn-outline-danger btn-sm ms-2" @onclick="() => RemoveExercise(currentBlockIndex, currentExerciseIndex)">Ã—</button>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="alert alert-info">
                            No blocks added yet. Click "Add Block" to start building your workout.
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Actions</h5>
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary" @onclick="SaveWorkout" disabled="@IsSaving">
                            @if (IsSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            @(IsEditMode ? "Update Workout" : "Create Workout")
                        </button>
                        <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                    </div>
                </div>
            </div>
            
            @if (IsEditMode)
            {
                <div class="card mt-3">
                    <div class="card-body">
                        <h6 class="card-title">Workout Info</h6>
                        <p class="card-text">
                            <small class="text-muted">
                                Created: @CurrentWorkout.CreatedAt.ToString("MMM dd, yyyy HH:mm")
                                @if (CurrentWorkout.UpdatedAt.HasValue)
                                {
                                    <text><br />Updated: @CurrentWorkout.UpdatedAt.Value.ToString("MMM dd, yyyy HH:mm")</text>
                                }
                            </small>
                        </p>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    [SupplyParameterFromQuery] public string? Username { get; set; }
    [SupplyParameterFromQuery] public string? WorkoutId { get; set; }
    
    private Workout? CurrentWorkout;
    private bool IsEditMode => !string.IsNullOrWhiteSpace(WorkoutId);
    private bool IsSaving = false;
    private string ErrorMessage = string.Empty;
    private string TagsInput = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(Username))
        {
            ErrorMessage = "Username is required";
            return;
        }

        if (IsEditMode)
        {
            try
            {
                CurrentWorkout = await StorageService.GetWorkoutAsync(Username, WorkoutId!);
                if (CurrentWorkout == null)
                {
                    ErrorMessage = "Workout not found";
                    return;
                }
                TagsInput = string.Join(", ", CurrentWorkout.Tags);
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error loading workout: {ex.Message}";
            }
        }
        else
        {
            CurrentWorkout = new Workout();
        }
    }

    private void AddBlock()
    {
        CurrentWorkout?.Blocks.Add(new Block { Name = $"Block {CurrentWorkout.Blocks.Count + 1}" });
    }

    private void RemoveBlock(int index)
    {
        if (CurrentWorkout != null && index >= 0 && index < CurrentWorkout.Blocks.Count)
        {
            CurrentWorkout.Blocks.RemoveAt(index);
        }
    }

    private void AddExercise(int blockIndex)
    {
        if (CurrentWorkout != null && blockIndex >= 0 && blockIndex < CurrentWorkout.Blocks.Count)
        {
            CurrentWorkout.Blocks[blockIndex].Exercises.Add(new Exercise());
        }
    }

    private void RemoveExercise(int blockIndex, int exerciseIndex)
    {
        if (CurrentWorkout != null && 
            blockIndex >= 0 && blockIndex < CurrentWorkout.Blocks.Count &&
            exerciseIndex >= 0 && exerciseIndex < CurrentWorkout.Blocks[blockIndex].Exercises.Count)
        {
            CurrentWorkout.Blocks[blockIndex].Exercises.RemoveAt(exerciseIndex);
        }
    }

    private async Task SaveWorkout()
    {
        if (CurrentWorkout == null || string.IsNullOrWhiteSpace(Username))
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(CurrentWorkout.Name))
        {
            ErrorMessage = "Workout name is required";
            return;
        }

        IsSaving = true;
        ErrorMessage = string.Empty;

        try
        {
            // Parse tags
            CurrentWorkout.Tags = TagsInput
                .Split(',', StringSplitOptions.RemoveEmptyEntries)
                .Select(t => t.Trim())
                .Where(t => !string.IsNullOrWhiteSpace(t))
                .ToList();

            if (IsEditMode)
            {
                await StorageService.UpdateWorkoutAsync(Username, WorkoutId!, CurrentWorkout);
            }
            else
            {
                await StorageService.CreateWorkoutAsync(Username, CurrentWorkout);
            }

            Navigation.NavigateTo("/workouts");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error saving workout: {ex.Message}";
        }
        finally
        {
            IsSaving = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/workouts");
    }
}