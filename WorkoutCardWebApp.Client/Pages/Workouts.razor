@page "/workouts"
@inject IWorkoutStorageService StorageService
@inject NavigationManager Navigation

<PageTitle>My Workouts</PageTitle>

<h1>My Workouts</h1>

<div class="mb-3">
    <label for="username" class="form-label">Username:</label>
    <div class="input-group">
        <input type="text" id="username" class="form-control" @bind="CurrentUsername" @onkeypress="HandleUsernameKeyPress" placeholder="Enter your username" />
        <button class="btn btn-primary" @onclick="LoadWorkouts">Load Workouts</button>
    </div>
</div>

@if (!string.IsNullOrWhiteSpace(CurrentUsername))
{
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3>Workouts for @CurrentUsername</h3>
        <button class="btn btn-success" @onclick="CreateNewWorkout">Create New Workout</button>
    </div>

    @if (IsLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (WorkoutList.Any())
    {
        <div class="row">
            @foreach (var workout in WorkoutList)
            {
                <div class="col-md-6 col-lg-4 mb-3">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">@workout.Name</h5>
                            @if (!string.IsNullOrWhiteSpace(workout.Description))
                            {
                                <p class="card-text">@workout.Description</p>
                            }
                            <p class="card-text">
                                <small class="text-muted">
                                    Created: @workout.CreatedAt.ToString("MMM dd, yyyy")
                                    @if (workout.UpdatedAt.HasValue)
                                    {
                                        <text><br />Updated: @workout.UpdatedAt.Value.ToString("MMM dd, yyyy")</text>
                                    }
                                </small>
                            </p>
                            <p class="card-text">
                                <span class="badge bg-secondary">@workout.Blocks.Count block(s)</span>
                                @if (workout.Tags.Any())
                                {
                                    @foreach (var tag in workout.Tags)
                                    {
                                        <span class="badge bg-primary ms-1">@tag</span>
                                    }
                                }
                            </p>
                            <div class="btn-group" role="group">
                                <button class="btn btn-primary btn-sm" @onclick="() => EditWorkout(workout.Id)">Edit</button>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteWorkout(workout.Id)">Delete</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-info">
            <h4>No workouts found</h4>
            <p>You haven't created any workouts yet. Click "Create New Workout" to get started!</p>
        </div>
    }
}

@code {
    private string CurrentUsername = string.Empty;
    private List<Workout> WorkoutList = new();
    private bool IsLoading = false;

    private async Task HandleUsernameKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoadWorkouts();
        }
    }

    private async Task LoadWorkouts()
    {
        if (string.IsNullOrWhiteSpace(CurrentUsername))
        {
            return;
        }

        IsLoading = true;
        StateHasChanged();

        try
        {
            WorkoutList = await StorageService.GetWorkoutsAsync(CurrentUsername);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading workouts: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private void CreateNewWorkout()
    {
        Navigation.NavigateTo($"/workouts/edit?username={CurrentUsername}");
    }

    private void EditWorkout(string workoutId)
    {
        Navigation.NavigateTo($"/workouts/edit?username={CurrentUsername}&workoutId={workoutId}");
    }

    private async Task DeleteWorkout(string workoutId)
    {
        if (string.IsNullOrWhiteSpace(CurrentUsername))
        {
            return;
        }

        try
        {
            var deleted = await StorageService.DeleteWorkoutAsync(CurrentUsername, workoutId);
            if (deleted)
            {
                await LoadWorkouts(); // Refresh the list
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting workout: {ex.Message}");
        }
    }
}