@page "/"
@using WorkoutCardWebApp.Models
@using WorkoutCardWebApp.Services
@inject IWorkoutStorageService StorageService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Workout Card Web App</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="display-4">Workout Card Web App</h1>
            <p class="lead">Manage your workouts with ease</p>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title">User Settings</h5>
                </div>
                <div class="card-body">
                    <div class="form-group">
                        <label for="username">Username:</label>
                        <input type="text" @bind="CurrentUsername" @bind:event="oninput" @onblur="LoadWorkouts" 
                               class="form-control" id="username" placeholder="Enter your username" />
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrWhiteSpace(CurrentUsername))
    {
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h2>Workouts for @CurrentUsername</h2>
                    <button class="btn btn-primary" @onclick="CreateNewWorkout">
                        <i class="fas fa-plus"></i> New Workout
                    </button>
                </div>

                @if (workouts == null)
                {
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else if (!workouts.Any())
                {
                    <div class="alert alert-info">
                        <h4>No workouts found</h4>
                        <p>Get started by creating your first workout!</p>
                    </div>
                }
                else
                {
                    <div class="row">
                        @foreach (var workout in workouts)
                        {
                            <div class="col-md-6 col-lg-4 mb-3">
                                <div class="card">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h6 class="card-title mb-0">@workout.Name</h6>
                                        <span class="badge bg-@GetStatusColor(workout.Status)">@workout.Status</span>
                                    </div>
                                    <div class="card-body">
                                        @if (!string.IsNullOrWhiteSpace(workout.Description))
                                        {
                                            <p class="card-text">@workout.Description</p>
                                        }
                                        <small class="text-muted">
                                            Created: @workout.CreatedDate.ToString("MMM dd, yyyy")
                                        </small>
                                        @if (workout.EstimatedDurationMinutes.HasValue)
                                        {
                                            <br />
                                            <small class="text-muted">
                                                Duration: @workout.EstimatedDurationMinutes min
                                            </small>
                                        }
                                    </div>
                                    <div class="card-footer">
                                        <div class="btn-group w-100" role="group">
                                            <button class="btn btn-outline-primary btn-sm" 
                                                    @onclick="() => EditWorkout(workout.Id)">
                                                Edit
                                            </button>
                                            <button class="btn btn-outline-danger btn-sm" 
                                                    @onclick="() => DeleteWorkout(workout.Id)">
                                                Delete
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private string CurrentUsername = "";
    private List<Workout>? workouts;

    protected override async Task OnInitializedAsync()
    {
        // Initialize with empty state
    }

    private async Task LoadWorkouts()
    {
        if (!string.IsNullOrWhiteSpace(CurrentUsername))
        {
            workouts = null; // Show loading
            StateHasChanged();
            workouts = await StorageService.GetWorkoutsAsync(CurrentUsername);
            StateHasChanged();
        }
        else
        {
            workouts = null;
        }
    }

    private void CreateNewWorkout()
    {
        Navigation.NavigateTo($"/workout/edit?username={CurrentUsername}");
    }

    private void EditWorkout(string workoutId)
    {
        Navigation.NavigateTo($"/workout/edit?username={CurrentUsername}&id={workoutId}");
    }

    private async Task DeleteWorkout(string workoutId)
    {
        if (await StorageService.DeleteWorkoutAsync(CurrentUsername, workoutId))
        {
            await LoadWorkouts();
        }
    }

    private string GetStatusColor(WorkoutStatus status)
    {
        return status switch
        {
            WorkoutStatus.Draft => "secondary",
            WorkoutStatus.Active => "primary",
            WorkoutStatus.Completed => "success",
            WorkoutStatus.Archived => "dark",
            _ => "secondary"
        };
    }
}
